#!/usr/bin/env python

""" icdiff.py

Author: Jeff Kaufman, derived from difflib.HtmlDiff

License: This code is usable under the same open terms as the rest of
         python.  See: http://www.python.org/psf/license/

Copyright (c) 2001, 2002, 2003, 2004, 2005, 2006 Python Software Foundation; All Rights Reserved

"""

import sys
import errno
from optparse import Option, OptionParser
from icdiff import diff, __version__


class MultipleOption(Option):
    ACTIONS = Option.ACTIONS + ("extend",)
    STORE_ACTIONS = Option.STORE_ACTIONS + ("extend",)
    TYPED_ACTIONS = Option.TYPED_ACTIONS + ("extend",)
    ALWAYS_TYPED_ACTIONS = Option.ALWAYS_TYPED_ACTIONS + ("extend",)

    def take_action(self, action, dest, opt, value, values, parser):
        if action == "extend":
            values.ensure_value(dest, []).append(value)
        else:
            Option.take_action(self, action, dest, opt, value, values, parser)


def start():
    # If you change any of these, also update README.
    parser = OptionParser(usage="usage: %prog [options] left_file right_file",
                          version="icdiff version %s" % __version__,
                          description="Show differences between files in a "
                          "two column view.",
                          option_class=MultipleOption)
    parser.add_option("--cols", default=None,
                      help="specify the width of the screen. Autodetection is "
                      "Unix only")
    parser.add_option("--encoding", default="utf-8",
                      help="specify the file encoding; defaults to utf8")
    parser.add_option("--head", default=0,
                      help="consider only the first N lines of each file")
    parser.add_option("--highlight", default=False,
                      action="store_true",
                      help="color by changing the background color instead of "
                      "the foreground color.  Very fast, ugly, displays all "
                      "changes")
    parser.add_option("-L", "--label",
                      action="extend",
                      type="string",
                      dest='labels',
                      help="override file labels with arbitrary tags. "
                      "Use twice, one for each file")
    parser.add_option("--line-numbers", default=False,
                      action="store_true",
                      help="generate output with line numbers")
    parser.add_option("--no-bold", default=False,
                      action="store_true",
                      help="use non-bold colors; recommended for with solarized")
    parser.add_option("--no-headers", default=False,
                      action="store_true",
                      help="don't label the left and right sides "
                      "with their file names")
    parser.add_option("--output-encoding", default="utf-8",
                      help="specify the output encoding; defaults to utf8")
    parser.add_option("--recursive", default=False,
                      action="store_true",
                      help="recursively compare subdirectories")
    parser.add_option("--show-all-spaces", default=False,
                      action="store_true",
                      help="color all non-matching whitespace including "
                      "that which is not needed for drawing the eye to "
                      "changes.  Slow, ugly, displays all changes")
    parser.add_option("--tabsize", default=8,
                      help="tab stop spacing")
    parser.add_option("-u", "--patch", default=True,
                      action="store_true",
                      help="generate patch. This is always true, "
                      "and only exists for compatibility")
    parser.add_option("-U", "--unified", "--numlines", default=5,
                      metavar="NUM",
                      help="how many lines of context to print; "
                      "can't be combined with --whole-file")
    parser.add_option("--whole-file", default=False,
                      action="store_true",
                      help="show the whole file instead of just changed "
                      "lines and context")

    (options, args) = parser.parse_args()

    if len(args) != 2:
        parser.print_help()
        sys.exit()

    a, b = args

    if not options.cols:
        def ioctl_GWINSZ(fd):
            try:
                import fcntl
                import termios
                import struct
                cr = struct.unpack('hh', fcntl.ioctl(fd, termios.TIOCGWINSZ,
                                                     '1234'))
            except Exception:
                return None
            return cr
        cr = ioctl_GWINSZ(0) or ioctl_GWINSZ(1) or ioctl_GWINSZ(2)
        if cr:
            options.cols = cr[1]
        else:
            options.cols = 80

    diff(options, a, b)

try:
    start()
except KeyboardInterrupt:
    pass
except IOError as e:
    if e.errno == errno.EPIPE:
        pass
    else:
        raise
